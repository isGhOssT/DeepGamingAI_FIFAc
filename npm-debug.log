0 info it worked if it ends with ok
1 verbose cli [ '/Users/michael/.nvm/versions/node/v5.8.0/bin/node',
1 verbose cli   '/Users/michael/.nvm/versions/node/v5.8.0/bin/npm',
1 verbose cli   'publish',
1 verbose cli   '--update-readme' ]
2 info using npm@3.7.3
3 info using node@v5.8.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/michael/Projects/OpenSource/TestApp/src/modules/react-native-form-generator',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/michael/.npm/react-native-form-generator/0.9.3/package.tgz not in flight; packing
9 verbose correctMkdir /Users/michael/.npm correctMkdir not in flight; initializing
10 info lifecycle react-native-form-generator@0.9.3~prepublish: react-native-form-generator@0.9.3
11 silly lifecycle react-native-form-generator@0.9.3~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/michael/.npm/react-native-form-generator/0.9.3/package.tgz',
12 verbose tar pack   '/Users/michael/Projects/OpenSource/TestApp/src/modules/react-native-form-generator' ]
13 verbose tarball /Users/michael/.npm/react-native-form-generator/0.9.3/package.tgz
14 verbose folder /Users/michael/Projects/OpenSource/TestApp/src/modules/react-native-form-generator
15 verbose addLocalTarball adding from inside cache /Users/michael/.npm/react-native-form-generator/0.9.3/package.tgz
16 verbose correctMkdir /Users/michael/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd react-native-form-generator@0.9.3
18 verbose afterAdd /Users/michael/.npm/react-native-form-generator/0.9.3/package/package.json not in flight; writing
19 verbose correctMkdir /Users/michael/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/michael/.npm/react-native-form-generator/0.9.3/package/package.json written
21 silly publish { _args:
21 silly publish    [ [ 'https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish        '/Users/michael/Projects/OpenSource/TestApp' ] ],
21 silly publish   _from: '.',
21 silly publish   _id: 'react-native-form-generator@0.9.3',
21 silly publish   _inCache: true,
21 silly publish   _installable: true,
21 silly publish   _location: '/react-native-form-generator',
21 silly publish   _phantomChildren: {},
21 silly publish   _requested:
21 silly publish    { hosted:
21 silly publish       { directUrl: 'https://raw.githubusercontent.com/MichaelCereda/react-native-form-generator/master/package.json',
21 silly publish         gitUrl: 'git://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish         httpsUrl: 'git+https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish         shortcut: 'github:MichaelCereda/react-native-form-generator',
21 silly publish         ssh: 'git@github.com:MichaelCereda/react-native-form-generator.git',
21 silly publish         sshUrl: 'git+ssh://git@github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish         type: 'github' },
21 silly publish      name: null,
21 silly publish      raw: 'https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish      rawSpec: 'https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish      scope: null,
21 silly publish      spec: 'git+https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish      type: 'hosted' },
21 silly publish   _requiredBy: [ '/' ],
21 silly publish   _resolved: 'git+https://github.com/MichaelCereda/react-native-form-generator.git#f67d26986f3916668d0c3e9e74b66d0ed6165cba',
21 silly publish   _shasum: '50a6d8de87b5cded6bf29e1226cbcdf003aa7f4f',
21 silly publish   _shrinkwrap: null,
21 silly publish   _spec: 'https://github.com/MichaelCereda/react-native-form-generator.git',
21 silly publish   _where: '/Users/michael/Projects/OpenSource/TestApp',
21 silly publish   author: { name: 'Michael Cereda', url: 'info@michaelcereda.com' },
21 silly publish   bugs: { url: 'https://github.com/MichaelCereda/react-native-form-generator/issues' },
21 silly publish   dependencies: {},
21 silly publish   description: 'Generate amazing React Native forms in a breeze',
21 silly publish   gitHead: 'f67d26986f3916668d0c3e9e74b66d0ed6165cba',
21 silly publish   homepage: 'https://github.com/MichaelCereda/react-native-form-generator#readme',
21 silly publish   keywords: [ 'react', 'native', 'forms', 'input', 'react', 'native' ],
21 silly publish   license: 'MIT',
21 silly publish   main: 'index.ios.js',
21 silly publish   name: 'react-native-form-generator',
21 silly publish   optionalDependencies: {},
21 silly publish   readme: 'React Native Form Generator\n================\nGenerate forms with native look and feel in a breeze\n\n[![NPM](https://nodei.co/npm/react-native-form-generator.png)](https://nodei.co/npm/react-native-form-generator/)\n\n\n\n![react-native-form-generator](https://cloud.githubusercontent.com/assets/107390/12499709/edc1c298-c07a-11e5-916c-394de83ebe51.gif)\n\n\n## Features\n* Doesn\'t have dependencies\n* Use your own icon pack\n* Easy to use and clean, react style syntax\n* Automatic events handling\n* Supports custom fields and styles without adding any weird syntax (just create a react component)\n* Applies by default the current OS style\n* Inspired by tcomb, the good parts\n* Performances: just the field changed gets a setState\n* You don\'t need to create a \'Model\' or a \'Struct\' that contains your data, just create a form component (the React\'s way)\n* Validate InputFields based on keyboardType (can be overridden using validationFunction)\n\n[My blogpost about React Native Form Generator](https://medium.com/@michaelcereda/react-native-forms-the-right-way-315802f989d6#.p9oj79vt3)\n\n## Installation\n```\n    npm install --save react-native-form-generator\n```\n## Warning: I\'m actively working on this project\n\n* Pull requests are very very welcome\n* All the elements are tested and stable against normal use cases (but i expect to do a lot of changes here and there)\n* Slider hasn\'t been created\n* I have to document the code properly and do some housekeeping, i apologize in advance.\n* Android support is coming.\n\n* This project requires (for some fields) react-native-vector-icons to show icons in some fields (i will remove this dependency soon)\n\n## Example\nthe example below generates the form you see in the animation\n```javascript\n\nimport { Form, InputField,\n        Separator, SwitchField, LinkField ,\n        PickerField, DatePickerField\n      } from \'react-native-form-generator\';\n\n export class MyCoolComponent extends React.Component{\n  handleFormChange(formData){\n    /*\n    formData will contain all the values of the form,\n    in this example.\n\n    formData = {\n      first_name:"",\n      last_name:"",\n      gender: \'\',\n      birthday: Date,\n      has_accepted_conditions: bool\n    }\n     */\n\n   }\n   render(){\n      <Form\n        ref=\'registrationForm\'\n        onFocus={this.handleFormFocus.bind(this)}\n        onChange={this.handleFormChange.bind(this)}\n        label="Personal Information">\n        <InputField ref=\'first_name\' label=\'First Name\' placeholder=\'First Name\'/>\n        <InputField ref=\'last_name\' placeholder=\'Last Name\'/>\n        <PickerField ref=\'gender\' placeholder=\'Gender\'\n          options={{\n            male: \'Male\',\n            female: \'Female\'\n          }}/>\n        <DatePickerField ref=\'birthday\'\n          minimumDate={new Date(\'1/1/1900\')}\n          maximumDate={new Date()} mode=\'date\' placeholder=\'Birthday\'/>\n        <Separator label=\'Terms & Conditions\'/>\n        <LinkField label=\'Read terms & conditions\'     onPress={this.openTermsAndConditionsURL.bind(this)}/>\n        <SwitchField label=\'I accept Terms & Conditions\' ref="has_accepted_conditions"\n          helpText=\'Please read carefully the terms & conditions\'/>\n      </Form>);\n  }\n}\n```\n\n## Form\nForm automatically attaches on change events so you just have to attach an handle to the onFocus attibute of Form to monitor all the changes.\n\nIt\'s just a wrapper that allows you to attach onFocus (used to track focus events and keyboard events) and onChange (used to track changes in every field)\n\n## Fields\n#### Common Rules\n* Every field that has to propagate its value in the form needs to have a ref attribute. (Separator and LinkField don\'t have a ref).\nCheck the example to understand the use of the ref attribute.\n\n\n### Separator\n```javascript\n  <Separator\n    label="Example" // optional: if present it will show the text\n    />\n```\n\n### InputField\nInput fields can be used to receive text, you can add icons (a react component) to the left and the right side of the field.\n\nInputField can validate values based on keyboardType property, validation is not "aggressive", just changes a value inside the class, you can access the value using the ref (ex. this.ref.example_input_field.valid).\n\nyou can customize your validation function by adding a validationFunction property to the component\n\nreact-native-form-generator doesn\'t depend on any icon library, that gives you freedom of adding any icon or react component you want.\n\nlook at the example here.\n\n![react-native-form-generator-inputfield](https://cloud.githubusercontent.com/assets/107390/12533401/1f6d1e7c-c1fd-11e5-96d0-aeba9a313ab9.gif)\n\n```javascript\n  <InputField\n    label=\'Example\' // if label is present the field is rendered with the value on the left (see First Name example in the gif), otherwise its rendered with textinput at full width (second name in the gif).\n    ref=\'example_input_field\' // used in onChange event to collect the value\n    value=\'default_value\' // used as initial value\n    keyboardType = \'\' // undefined, \'email\',\n    validationFunction = {(value)=>{return true;}}\n    iconRight={\n      <Icon name=\'checkmark-circled\'\n        size={30}\n        style={[\n          {marginTop:7, color:"#61d062" },\n          ((self)=>{\n            //i can change the style of the component related to the attibute of example_input_field\n            if(!!(self.refs && self.refs.example_input_field)){\n              if(!self.refs.example_input_field.valid) return {color:\'#d52222\'}\n            }\n            }\n          )(this)]}\n        />\n    }  //React Component\n    />\n```\nAll the props are passed down to the underlying TextInput Component\n\n| Prop (parameters) | Description |\n| --- | --- |\n| label | Text to show in the field, if exists will move the textinput on the right, providing also the right alignment |\n| iconLeft | React component, shown on the left of the field, the component needs to have a prop size to allow the inputText to resize properly  |\n| iconRight | React component, shown on the right of the field, the component needs to have a prop size to allow the inputText to resize properly  |\n\n### SwitchField\n\n| Prop (parameters) | Description |\n| --- | --- |\n| onValueChange(value) | triggered at every value change, returns the new value of the field|\n| value | Initial value of the component (Boolean)|\n\n\n### PickerField\n| Prop (parameters) | Description |\n| --- | --- |\n| onValueChange(value) | triggered at every value change, returns the new value of the field|\n| value | Initial value of the component|\n| options=[{label:"test",value="Test"},...] | All the possible options, array of objects|\n| iconRight | React component, shown on the left of the text field (i suggest Ionicons \'ios-arrow-right\' for a nice iOS effect)  |\n\n### DatePickerField\nEvery prop is passed down to the underlying DatePickerIOS component.\n\n| Prop (parameters) | Description |\n| --- | --- |\n| onValueChange(date) | triggered at every value change, returns the new value of the field|\n| date | Initial date of the component, defaults to (new Date()) |\n| iconRight | React component, shown on the left of the text field (i suggest Ionicons \'ios-arrow-right\' for a nice iOS effect)  |\n\n### LinkField\nEvery prop is passed down to the underlying DatePickerIOS component.\n\n| Prop (parameters) | Description |\n| --- | --- |\n| label | Text to show in the field |\n| iconLeft | React component, shown on the left of the text field  |\n| iconRight | React component, shown on the left of the text field (i suggest Ionicons \'ios-arrow-right\' for a nice iOS effect)  |\n\n### KeyboardEvents\nreact-native-form-generator ships with an implementation ok KeyboardAwareScrollView that make handling keyboard events a breeze.\ncheck here https://medium.com/@michaelcereda/react-native-forms-the-right-way-315802f989d6#.p9oj79vt3\n\n![react-native-form-generator-keyevents](https://cloud.githubusercontent.com/assets/107390/12499708/edb63838-c07a-11e5-9fe4-87979285ccc0.gif)\n\n### Custom Fields\nWith react-native-form-generator is extremely easy to create your own custom fields.\nYou just need to know that:\n1. Every field is a react component\n2. Evey field will receive 3 props from the Form object:\n   - fieldRef: contains the reference of the field (workaround on a react-native bug).\n   - onChange: must be called every time i want to update the values inside the form component. (required)\n   - onValueChange: can be used whenever you prefer to pass the values to another component.\n\nExample\n```javascript\n\'use strict\';\nimport {Field} from \'../lib/Field\';\n\nexport class SimpleInputField extends React.Component{\n  constructor(props){\n    super();\n    }\n  }\n\n  handleChange(event){\n    var value = event.nativeEvent.text;\n\n    this.setState({value:value});\n\n    // This updates values in form everytime i update\n    if(this.props.onChange)      this.props.onChange(this.props.fieldRef, value);\n    if(this.props.onValueChange) this.props.onValueChange(value);\n  }\n\n  render(){\n    return(<Field>\n        <TextInput\n          {...this.props}\n          ref=\'inputBox\'\n\n          onChange={this.handleChange.bind(this)}\n\n          placeholder={this.props.placeholder}\n          value={this.state.value}\n          />\n    </Field>\n  )\n}\n\n}\n```\n### Wrapping fields\nYou can decide to wrap every field in a component to mantain design uniformity and avoid repetitions (ex. Icons ?!).\n\nBattle tested example\n```javascript\nimport {PickerField, LinkField} from \'react-native-form-generator\';\nimport Icon from \'react-native-vector-icons/Ionicons\';\n\nlet {\n  StyleSheet\n} = React;\n\nexport class WrappedLinkField extends React.Component{\n  render(){\n\n    return <LinkField\n      label={this.props.label}\n      onPress={this.props.onPress}\n      iconRight={<Icon name=\'ios-arrow-right\'\n      size={30}\n        />\n    }\n}\n\nexport class WrappedPickerField extends React.Component{\n    render(){\n\n      return <PickerField\n        fieldRef = {this.props.fieldRef}\n        value={this.props.value}\n        placeholder={this.props.placeholder}\n        options={this.props.options}\n        onChange={this.props.onChange}\n        onValueChange={this.props.onValueChange}\n        iconRight={\n          <Icon name=\'ios-arrow-right\'\n          size={30}\n\n          style={[\n            formStyles.alignRight,{color: \'#C7C7CC\'},\n            this.props.iconStyle]}/>\n      }\n      />\n  }\n}\n\nlet formStyles = StyleSheet.create({\n    alignRight:{\n      marginTop: 7, position:\'absolute\', right: 10\n    }\n  });\n```\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/MichaelCereda/react-native-form-generator.git' },
21 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
21 silly publish   version: '0.9.3' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name react-native-form-generator
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry uri https://registry.npmjs.org/react-native-form-generator
27 verbose publish registryBase https://registry.npmjs.org/
28 silly publish uploading /Users/michael/.npm/react-native-form-generator/0.9.3/package.tgz
29 verbose request uri https://registry.npmjs.org/react-native-form-generator
30 verbose request sending authorization for write operation
31 info attempt registry request try #1 at 4:31:35 PM
32 verbose request using bearer token for auth
33 verbose request id 6181b89f62bf2fad
34 http request PUT https://registry.npmjs.org/react-native-form-generator
35 http 403 https://registry.npmjs.org/react-native-form-generator
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '95',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Tue, 12 Jul 2016 14:31:37 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-fra1235-FRA',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1468333896.560589,VS0,VE1313',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /Users/michael/.npm/registry.npmjs.org/react-native-form-generator on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 0.9.3." : react-native-form-generator
39 verbose stack     at makeError (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/request/request.js:199:22)
39 verbose stack     at emitTwo (events.js:100:13)
39 verbose stack     at Request.emit (events.js:185:7)
39 verbose stack     at Request.<anonymous> (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/request/request.js:1036:10)
39 verbose stack     at emitOne (events.js:95:20)
39 verbose stack     at Request.emit (events.js:182:7)
39 verbose stack     at IncomingMessage.<anonymous> (/Users/michael/.nvm/versions/node/v5.8.0/lib/node_modules/npm/node_modules/request/request.js:963:12)
40 verbose statusCode 403
41 verbose pkgid react-native-form-generator
42 verbose cwd /Users/michael/Projects/OpenSource/TestApp/src/modules/react-native-form-generator
43 error Darwin 15.5.0
44 error argv "/Users/michael/.nvm/versions/node/v5.8.0/bin/node" "/Users/michael/.nvm/versions/node/v5.8.0/bin/npm" "publish" "--update-readme"
45 error node v5.8.0
46 error npm  v3.7.3
47 error code E403
48 error "You cannot publish over the previously published version 0.9.3." : react-native-form-generator
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
